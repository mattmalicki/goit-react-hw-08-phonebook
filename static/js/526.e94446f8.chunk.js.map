{"version":3,"file":"static/js/526.e94446f8.chunk.js","mappings":"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","sources":["components/atoms/EmailInput/EmailInput.jsx","components/atoms/PassInput/PassInput.jsx","../node_modules/@chakra-ui/toast/src/use-toast.tsx","components/atoms/UsernameInput/UsernameInput.jsx","components/organisms/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx","../node_modules/@chakra-ui/icons/src/Info.tsx"],"sourcesContent":["import { EmailIcon } from '@chakra-ui/icons';\nimport { Input, InputGroup, InputLeftElement } from '@chakra-ui/react';\n\nexport const EmailInput = () => {\n  return (\n    <InputGroup _focusWithin={{ color: 'teal' }}>\n      <InputLeftElement>\n        <EmailIcon />\n      </InputLeftElement>\n      <Input\n        type=\"email\"\n        name=\"email\"\n        variant=\"outline\"\n        placeholder=\"Your email\"\n        required={true}\n        focusBorderColor=\"teal.400\"\n      />\n    </InputGroup>\n  );\n};\n","import { useState } from 'react';\n\nimport { LockIcon, ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\nimport {\n  Button,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n} from '@chakra-ui/react';\n\nexport const PassInput = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  return (\n    <InputGroup _focusWithin={{ color: 'teal' }}>\n      <InputLeftElement>\n        <LockIcon />\n      </InputLeftElement>\n      <Input\n        type={show ? 'text' : 'password'}\n        name=\"password\"\n        placeholder=\"Password\"\n        required={true}\n        focusBorderColor=\"teal.400\"\n        minLength=\"7\"\n      />\n      <InputRightElement width=\"4.5rem\">\n        <Button\n          h=\"1.75rem\"\n          size=\"sm\"\n          variant=\"ghost\"\n          colorScheme=\"inherit\"\n          onClick={handleClick}\n        >\n          {show ? <ViewOffIcon /> : <ViewIcon />}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  );\n};\n","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n","import { InfoIcon } from '@chakra-ui/icons';\nimport { Input, InputGroup, InputLeftElement } from '@chakra-ui/react';\n\nexport const UsernameInput = () => {\n  return (\n    <InputGroup _focusWithin={{ color: 'teal' }}>\n      <InputLeftElement>\n        <InfoIcon />\n      </InputLeftElement>\n      <Input\n        type=\"text\"\n        name=\"username\"\n        placeholder=\"Your username\"\n        title=\"You need to enter your name or username.\"\n        required={true}\n        focusBorderColor=\"teal.400\"\n      />\n    </InputGroup>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nimport { Link } from 'react-router-dom';\n\nimport { useAuth } from 'hooks';\n\nimport { Button, useToast } from '@chakra-ui/react';\nimport { SpinnerIcon } from '@chakra-ui/icons';\nimport { PassInput } from 'components/atoms/PassInput/PassInput';\nimport { EmailInput } from 'components/atoms/EmailInput/EmailInput';\nimport { UsernameInput } from 'components/atoms/UsernameInput/UsernameInput';\n\nconst formStyles = {\n  width: '100%',\n  maxWidth: '500px',\n  display: 'flex',\n  flexDirection: 'column',\n  flexWrap: 'nowrap',\n  gap: '15px',\n  padding: '5px',\n  border: '1px solid black',\n  borderRadius: '5px',\n};\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const { isRefreshing, error } = useAuth();\n  const toast = useToast();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    toast.promise(\n      dispatch(\n        register({\n          name: form.username.value,\n          email: form.email.value,\n          password: form.password.value,\n        })\n      ),\n      {\n        success: { title: 'Hurray!', description: 'Account created' },\n        error: { title: 'Error', description: error },\n        loading: { title: 'Registering', description: 'Creating an account' },\n      }\n    );\n  };\n\n  return (\n    <form name=\"register\" style={formStyles} onSubmit={handleSubmit}>\n      <h2>Register:</h2>\n      <EmailInput />\n      <UsernameInput />\n      <PassInput />\n      <Button type=\"submit\" colorScheme=\"teal\" variant=\"outline\">\n        {isRefreshing ? <SpinnerIcon /> : 'Register'}\n      </Button>\n      <Button type=\"button\" colorScheme=\"teal\" variant=\"link\">\n        <Link to=\"/goit-react-hw-08-phonebook/login\">or Login</Link>\n      </Button>\n    </form>\n  );\n};\n","import { RegisterForm } from 'components/organisms/RegisterForm/RegisterForm';\nconst styles = {\n  width: '100%',\n  display: 'flex',\n  justifyContent: 'right',\n  flexWrap: 'nowrap',\n  gap: '10px',\n};\n\nconst Register = () => {\n  return (\n    <div style={styles}>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default Register;\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const InfoIcon = createIcon({\n  d: \"M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z\",\n})\n"],"names":["EmailInput","_jsxs","InputGroup","_focusWithin","color","children","_jsx","InputLeftElement","EmailIcon","Input","type","name","variant","placeholder","required","focusBorderColor","PassInput","_useState","useState","_useState2","_slicedToArray","show","setShow","LockIcon","minLength","InputRightElement","width","Button","h","size","colorScheme","onClick","ViewOffIcon","ViewIcon","useToast","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction","UsernameInput","InfoIcon","title","formStyles","maxWidth","display","flexDirection","flexWrap","gap","padding","border","borderRadius","RegisterForm","dispatch","useDispatch","_useAuth","useAuth","isRefreshing","error","toast","style","onSubmit","event","preventDefault","form","currentTarget","promise","register","username","value","email","password","success","description","loading","SpinnerIcon","Link","to","styles","justifyContent","createIcon","d"],"sourceRoot":""}